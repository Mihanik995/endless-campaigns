// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String             @id @unique
  username          String             @unique
  password          Bytes
  salt              Bytes
  email             String             @unique
  isActive          Boolean            @default(false)
  Campaigns         Campaigns[]
  CampaignRegisters CampaignRegister[]

  SimpleMission SimpleMission[]

  pairings PlayersOnPairings[]
}

model Campaigns {
  id          String   @id @unique
  owner       Users    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  title       String
  description String
  regulations String
  dateStart   DateTime
  dateEnd     DateTime

  requiresRegisterApproval Boolean            @default(true)
  CampaignRegisters        CampaignRegister[]

  CampaignPeriod CampaignPeriod[]

  Pairing Pairing[]
}

model CampaignRegister {
  id            String    @id @unique
  player        Users     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      String
  campaign      Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId    String
  formationName String
  rosterLink    String
  approved      Boolean
}

model CampaignPeriod {
  id         String    @id @unique
  campaign   Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  dateStart  DateTime
  dateEnd    DateTime

  Pairing Pairing[]
}

model SimpleMission {
  id                   String    @id @unique
  creator              Users     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  title                String
  narrativeDescription String
  missionConditions    String
  Pairing              Pairing[]
}

model Pairing {
  id              String              @id @unique
  campaign        Campaigns           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId      String
  period          CampaignPeriod      @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId        String
  simpleMission   SimpleMission       @relation(fields: [simpleMissionId], references: [id])
  simpleMissionId String
  players         PlayersOnPairings[]
}

model PlayersOnPairings {
  player    Users   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  pairing   Pairing @relation(fields: [pairingId], references: [id], onDelete: Cascade)
  pairingId String

  @@id([pairingId, playerId])
}
