// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @unique
  username             String                 @unique
  password             Bytes
  salt                 Bytes
  email                String                 @unique
  isActive             Boolean                @default(false)
  campaigns            Campaign[]
  campaignRegisters    CampaignRegister[]
  pairings             PlayersOnPairings[]
  wonPairings          WinnersOnPairings[]
  question             Question[]
  mission              Mission[]
  nodesPassedOnPairing NodesPassedOnPairing[]

  notifications             NotificationType @default(none)
  allowPlatformNotification Boolean          @default(false)
  telegramId                String?
}

enum NotificationType {
  none
  email
  telegram
}

model Campaign {
  id                             String             @id @default(uuid(4))
  owner                          User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                        String
  title                          String
  description                    String
  regulations                    String
  dateStart                      DateTime
  dateEnd                        DateTime
  requiresRegisterApproval       Boolean            @default(true)
  campaignRegisters              CampaignRegister[]
  campaignPeriod                 CampaignPeriod[]
  pairing                        Pairing[]
  requiresPairingResultsApproval Boolean            @default(true)
  requiresPairingReport          Boolean            @default(true)

  customNotifications CustomNotification[]
}

model CampaignRegister {
  id            String   @id @default(uuid(4))
  player        User     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      String
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId    String
  formationName String
  rosterLink    String
  approved      Boolean
}

model CampaignPeriod {
  id         String    @id @default(uuid(4))
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  dateStart  DateTime
  dateEnd    DateTime
  pairing    Pairing[]
}

model Mission {
  id                   String        @id @default(uuid(4))
  creator              User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  title                String
  narrativeDescription String
  pairing              Pairing[]
  question             Question[]
  missionConditions    String?
  nodes                MissionNode[]

  playersOnPairings PlayersOnPairings[]
}

model MissionNode {
  id                   String                 @id @default(uuid(4))
  mission              Mission                @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId            String
  isMissionStart       Boolean
  nextLinks            NodeLink[]             @relation("FromNode")
  prevLinks            NodeLink[]             @relation("ToNode")
  label                String
  buttonLabel          String
  narrativeDescription String
  missionConditions    String
  positionX            Int
  positionY            Int
  nodesPassedOnPairing NodesPassedOnPairing[]
}

model NodeLink {
  id     String      @id @default(uuid(4))
  from   MissionNode @relation("FromNode", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String
  to     MissionNode @relation("ToNode", fields: [toId], references: [id], onDelete: Cascade)
  toId   String
}

model Question {
  id        String  @id @default(uuid(4))
  creator   User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId String
  text      String
  answer    String?
}

model Pairing {
  id                   String                 @id @default(uuid(4))
  campaign             Campaign               @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId           String
  period               CampaignPeriod         @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId             String
  mission              Mission                @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId            String
  players              PlayersOnPairings[]
  played               Boolean                @default(false)
  winners              WinnersOnPairings[]
  resultsApproved      Boolean                @default(false)
  reportLink           String?
  resultsRejected      Boolean                @default(false)
  rejectMessage        String?
  nodesPassedOnPairing NodesPassedOnPairing[]
}

model PlayersOnPairings {
  player            User     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId          String
  pairing           Pairing  @relation(fields: [pairingId], references: [id], onDelete: Cascade)
  pairingId         String
  personalMission   Mission? @relation(fields: [personalMissionId], references: [id], onDelete: SetNull)
  personalMissionId String?

  @@id([pairingId, playerId])
}

model WinnersOnPairings {
  player    User    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  pairing   Pairing @relation(fields: [pairingId], references: [id], onDelete: Cascade)
  pairingId String

  @@id([playerId, pairingId])
}

model NodesPassedOnPairing {
  node      MissionNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId    String
  pairing   Pairing     @relation(fields: [pairingId], references: [id], onDelete: Cascade)
  pairingId String
  player    User        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String

  @@id([pairingId, nodeId, playerId])
}

model CustomNotification {
  id         String   @id @default(uuid(4))
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  heading    String
  text       String
  createdAt  DateTime @default(now())
}
